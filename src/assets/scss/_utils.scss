@charset "UTF-8";

/*
 * File       : _utils.scss
 * Author     : khr
 *
 * Dependency : _variables.scss, _mixin.scss 
 *
 * SUMMARY:
* 01) Align
* 02) Background
* 03) Borders
* 04) Clearfix
* 05) Display
* 06) Embed
* 07) Flex
* 08) Float
* 09) Interactions
* 10) Overflow
* 11) Position
* 12) Screenreaders
* 13) Sizing
* 14) Spacing
* 15) Stretched-link
* 16) Text
* 17) Visibility
* 18) Section
* 19) Shadow
* 20) grid
* 21) visually-hidden
* 22) curser 
* 23) ellipsis/*

/* 01) Align ================================================== */
.align-baseline {
	vertical-align: baseline !important;
} // Browser default
.align-top {
	vertical-align: top !important;
}
.align-middle {
	vertical-align: middle !important;
}
.align-bottom {
	vertical-align: bottom !important;
}
.align-text-bottom {
	vertical-align: text-bottom !important;
}
.align-text-top {
	vertical-align: text-top !important;
}

/* 02) Background ==================================================*/
@each $color, $value in $theme-colors {
	@include bg-variant('.bg-#{$color}', $value, true);
}

@if $enable-gradients {
	@each $color, $value in $theme-colors {
		@include bg-gradient-variant('.bg-gradient-#{$color}', $value, true);
	}
}

.bg-white {
	background-color: $white !important;
}

.bg-transparent {
	background-color: transparent !important;
}

/* 03) Borders  ==================================================*/
.border {
	border: $border-width solid $border-color !important;
}
.border-top {
	border-top: $border-width solid $border-color !important;
}
.border-right {
	border-right: $border-width solid $border-color !important;
}
.border-bottom {
	border-bottom: $border-width solid $border-color !important;
}
.border-left {
	border-left: $border-width solid $border-color !important;
}

.border-0 {
	border: 0 !important;
}
.border-top-0 {
	border-top: 0 !important;
}
.border-right-0 {
	border-right: 0 !important;
}
.border-bottom-0 {
	border-bottom: 0 !important;
}
.border-left-0 {
	border-left: 0 !important;
}

@each $color, $value in $theme-colors {
	.border-#{$color} {
		border-color: $value !important;
	}
}

.border-white {
	border-color: $white !important;
}

//
// Border-radius
//

.rounded-sm {
	border-radius: $border-radius-sm !important;
}

.rounded {
	border-radius: $border-radius !important;
}

.rounded-top {
	border-top-left-radius: $border-radius !important;
	border-top-right-radius: $border-radius !important;
}

.rounded-right {
	border-top-right-radius: $border-radius !important;
	border-bottom-right-radius: $border-radius !important;
}

.rounded-bottom {
	border-bottom-right-radius: $border-radius !important;
	border-bottom-left-radius: $border-radius !important;
}

.rounded-left {
	border-top-left-radius: $border-radius !important;
	border-bottom-left-radius: $border-radius !important;
}

.rounded-lg {
	border-radius: $border-radius-lg !important;
}

.rounded-circle {
	border-radius: 50% !important;
}

.rounded-pill {
	border-radius: $rounded-pill !important;
}

.rounded-0 {
	border-radius: 0 !important;
}

/* 04) Clearfix ==================================================*/

.clearfix {
	&::after {
		display: block;
		clear: both;
		content: '';
	}
}

/* 05) Display ==================================================*/

//
// Utilities for common `display` values
//

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $value in $displays {
			.d#{$infix}-#{$value} {
				display: $value !important;
			}
		}
	}
}

//
// Utilities for toggling `display` in print
//

@media print {
	@each $value in $displays {
		.d-print-#{$value} {
			display: $value !important;
		}
	}
}

/* 06) Embed ==================================================*/

.embed-responsive {
	position: relative;
	display: block;
	width: 100%;
	padding: 0;
	overflow: hidden;

	&::before {
		display: block;
		content: '';
	}

	.embed-responsive-item,
	iframe,
	embed,
	object,
	video {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;
		border: 0;
	}
}

@each $embed-responsive-aspect-ratio in $embed-responsive-aspect-ratios {
	$embed-responsive-aspect-ratio-x: nth($embed-responsive-aspect-ratio, 1);
	$embed-responsive-aspect-ratio-y: nth($embed-responsive-aspect-ratio, 2);

	.embed-responsive-#{$embed-responsive-aspect-ratio-x}by#{$embed-responsive-aspect-ratio-y} {
		&::before {
			padding-top: percentage($embed-responsive-aspect-ratio-y / $embed-responsive-aspect-ratio-x);
		}
	}
}

/* 07) Flex ==================================================*/
// stylelint-disable declaration-no-important

// Flex variation
//
// Custom styles for additional flex alignment options.

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.flex#{$infix}-row {
			flex-direction: row !important;
		}
		.flex#{$infix}-column {
			flex-direction: column !important;
		}
		.flex#{$infix}-row-reverse {
			flex-direction: row-reverse !important;
		}
		.flex#{$infix}-column-reverse {
			flex-direction: column-reverse !important;
		}

		.flex#{$infix}-wrap {
			flex-wrap: wrap !important;
		}
		.flex#{$infix}-nowrap {
			flex-wrap: nowrap !important;
		}
		.flex#{$infix}-wrap-reverse {
			flex-wrap: wrap-reverse !important;
		}
		.flex#{$infix}-fill {
			flex: 1 1 auto !important;
		}
		.flex#{$infix}-grow-0 {
			flex-grow: 0 !important;
		}
		.flex#{$infix}-grow-1 {
			flex-grow: 1 !important;
		}
		.flex#{$infix}-shrink-0 {
			flex-shrink: 0 !important;
		}
		.flex#{$infix}-shrink-1 {
			flex-shrink: 1 !important;
		}

		.justify-content#{$infix}-start {
			justify-content: flex-start !important;
		}
		.justify-content#{$infix}-end {
			justify-content: flex-end !important;
		}
		.justify-content#{$infix}-center {
			justify-content: center !important;
		}
		.justify-content#{$infix}-between {
			justify-content: space-between !important;
		}
		.justify-content#{$infix}-around {
			justify-content: space-around !important;
		}

		.align-items#{$infix}-start {
			align-items: flex-start !important;
		}
		.align-items#{$infix}-end {
			align-items: flex-end !important;
		}
		.align-items#{$infix}-center {
			align-items: center !important;
		}
		.align-items#{$infix}-baseline {
			align-items: baseline !important;
		}
		.align-items#{$infix}-stretch {
			align-items: stretch !important;
		}

		.align-content#{$infix}-start {
			align-content: flex-start !important;
		}
		.align-content#{$infix}-end {
			align-content: flex-end !important;
		}
		.align-content#{$infix}-center {
			align-content: center !important;
		}
		.align-content#{$infix}-between {
			align-content: space-between !important;
		}
		.align-content#{$infix}-around {
			align-content: space-around !important;
		}
		.align-content#{$infix}-stretch {
			align-content: stretch !important;
		}

		.align-self#{$infix}-auto {
			align-self: auto !important;
		}
		.align-self#{$infix}-start {
			align-self: flex-start !important;
		}
		.align-self#{$infix}-end {
			align-self: flex-end !important;
		}
		.align-self#{$infix}-center {
			align-self: center !important;
		}
		.align-self#{$infix}-baseline {
			align-self: baseline !important;
		}
		.align-self#{$infix}-stretch {
			align-self: stretch !important;
		}
	}
}

/* 08) Float==================================================*/
@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.float#{$infix}-left {
			float: left !important;
		}
		.float#{$infix}-right {
			float: right !important;
		}
		.float#{$infix}-none {
			float: none !important;
		}
	}
}

/* 09) Interactions==================================================*/
//단락 선택 기능 all, auto ,none
@each $value in $user-selects {
	.user-select-#{$value} {
		user-select: $value !important;
	}
}

/* 10) Overflow==================================================*/

@each $value in $overflows {
	.overflow-#{$value} {
		overflow: $value !important;
	}
}

/* 11) Position==================================================*/
// Common values
@each $position in $positions {
	.position-#{$position} {
		position: $position !important;
	}
}

// Shorthand

.fixed-top {
	position: fixed;
	top: 0;
	right: 0;
	left: 0;
	z-index: $zindex-fixed;
}

.fixed-bottom {
	position: fixed;
	right: 0;
	bottom: 0;
	left: 0;
	z-index: $zindex-fixed;
}

.sticky-top {
	@supports (position: sticky) {
		position: sticky;
		top: 0;
		z-index: $zindex-sticky;
	}
}

/* 12) Screenreaders==================================================*/

.sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	clip-path: inset(50%);
	border: 0;
}

.sr-only-focusable {
	&:active,
	&:focus {
		position: static;
		width: auto;
		height: auto;
		overflow: visible;
		clip: auto;
		white-space: normal;
		clip-path: none;
	}
}

/* 13) Sizing==================================================*/
// Width and height
@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $prop, $abbrev in (width: w, height: h) {
			@each $size, $length in $sizes {
				.#{$abbrev}#{$infix}-#{$size} {
					#{$prop}: $length !important;
				}
			}
		}
	}
}

.mw-100 {
	max-width: 100% !important;
}
.mh-100 {
	max-height: 100% !important;
}

// Viewport additional helpers

.min-vw-100 {
	min-width: 100vw !important;
}
.min-vh-100 {
	min-height: 100vh !important;
}

.vw-100 {
	width: 100vw !important;
}
.vh-100 {
	height: 100vh !important;
}

/* 14) Spacing==================================================*/

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $prop, $abbrev in (margin: m, padding: p) {
			@each $size, $length in $spacers {
				.#{$abbrev}#{$infix}-#{$size} {
					#{$prop}: $length !important;
				}
				.#{$abbrev}t#{$infix}-#{$size},
				.#{$abbrev}y#{$infix}-#{$size} {
					#{$prop}-top: $length !important;
				}
				.#{$abbrev}r#{$infix}-#{$size},
				.#{$abbrev}x#{$infix}-#{$size} {
					#{$prop}-right: $length !important;
				}
				.#{$abbrev}b#{$infix}-#{$size},
				.#{$abbrev}y#{$infix}-#{$size} {
					#{$prop}-bottom: $length !important;
				}
				.#{$abbrev}l#{$infix}-#{$size},
				.#{$abbrev}x#{$infix}-#{$size} {
					#{$prop}-left: $length !important;
				}
			}
		}

		// Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
		@each $size, $length in $spacers {
			@if $size != 0 {
				.m#{$infix}-n#{$size} {
					margin: -$length !important;
				}
				.mt#{$infix}-n#{$size},
				.my#{$infix}-n#{$size} {
					margin-top: -$length !important;
				}
				.mr#{$infix}-n#{$size},
				.mx#{$infix}-n#{$size} {
					margin-right: -$length !important;
				}
				.mb#{$infix}-n#{$size},
				.my#{$infix}-n#{$size} {
					margin-bottom: -$length !important;
				}
				.ml#{$infix}-n#{$size},
				.mx#{$infix}-n#{$size} {
					margin-left: -$length !important;
				}
			}
		}

		// Some special margin utils
		.m#{$infix}-auto {
			margin: auto !important;
		}
		.mt#{$infix}-auto,
		.my#{$infix}-auto {
			margin-top: auto !important;
		}
		.mr#{$infix}-auto,
		.mx#{$infix}-auto {
			margin-right: auto !important;
		}
		.mb#{$infix}-auto,
		.my#{$infix}-auto {
			margin-bottom: auto !important;
		}
		.ml#{$infix}-auto,
		.mx#{$infix}-auto {
			margin-left: auto !important;
		}
	}
}

/* 15) Stretched-link==================================================*/
.stretched-link {
	&::after {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		z-index: 1;
		// Just in case `pointer-events: none` is set on a parent
		pointer-events: auto;
		content: '';
		// IE10 bugfix, see https://stackoverflow.com/questions/16947967/ie10-hover-pseudo-class-doesnt-work-without-background-color
		background-color: rgba(0, 0, 0, 0);
	}
}

/* 16) Text==================================================*/

// Alignment

.text-justify {
	text-align: justify !important;
}
.text-wrap {
	white-space: normal !important;
}
.text-nowrap {
	white-space: nowrap !important;
}

// Responsive alignment

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.text#{$infix}-left {
			text-align: left !important;
		}
		.text#{$infix}-right {
			text-align: right !important;
		}
		.text#{$infix}-center {
			text-align: center !important;
		}
	}
}

// Transformation

.text-lowercase {
	text-transform: lowercase !important;
}
.text-uppercase {
	text-transform: uppercase !important;
}
.text-capitalize {
	text-transform: capitalize !important;
}

// Weight and italics

.font-weight-thin {
	font-weight: 100 !important;
}
.font-weight-light {
	font-weight: 300 !important;
}
.font-weight-normal {
	font-weight: 400 !important;
}
.font-weight-medium {
	font-weight: 500 !important;
}
.font-weight-semibold {
	font-weight: 600 !important;
}
.font-weight-bold {
	font-weight: 700 !important;
}
.font-weight-black {
	font-weight: 900 !important;
}
.font-italic {
	font-style: italic !important;
}

// Contextual colors

.text-white {
	color: $white !important;
}
// text-color

@each $color, $value in $theme-colors {
	@include text-emphasis-variant('.text-#{$color}', $value, true);
}

@each $color, $value in $grays {
	@include text-emphasis-variant('.text-#{$color}', $value, true);
}

// Misc

.text-hide {
	font: 0px;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

.text-decoration-none {
	text-decoration: none !important;
}

.text-break {
	word-wrap: break-word !important;
}

.text-keep {
	word-break: keep-all !important;
}

// Reset

.text-reset {
	color: inherit !important;
}

// Text styles
.text-italic {
	font-style: italic;
}

.text-normal {
	font-style: normal;
}

// Text decoration
.text-underline {
	text-decoration: underline;
}

.text-strike {
	text-decoration: line-through;
}

// Text weight
.font-weight-thin {
	font-weight: 100;
}

.font-weight-light {
	font-weight: 300;
}

.font-weight-regular {
	font-weight: 400;
}

.font-weight-medium {
	font-weight: 500;
}

.font-weight-sbold {
	font-weight: 600;
}

.font-weight-ubold {
	font-weight: 900;
}

// Text spacing
.text-spacing-0 {
	letter-spacing: 0;
}
.text-spacing-25 {
	letter-spacing: 0.025em;
}
.text-spacing-50 {
	letter-spacing: 0.05em;
}
.text-spacing-75 {
	letter-spacing: 0.075em;
}
.text-spacing-100 {
	letter-spacing: 0.1em;
}

// Text Custom Style
.text-style-1 {
	font-size: 16px;
	line-height: 1.5;
	font-weight: 500;
	letter-spacing: 0.025em;
	text-indent: -28px;
	padding-left: 28px;

	.icon {
		vertical-align: middle;
		font-size: 20px;
		line-height: 24px;
		min-width: 18px;
		margin-right: 10px;
		text-indent: 0;
	}
}

* + .text-style-1 {
	margin-top: 20px;
}

.text-strike-1 {
	position: relative;
	display: inline-block;
	color: rgba($border, 0.52);

	&::before {
		position: absolute;
		content: '';
		bottom: 36%;
		left: -8px;
		height: 2px;
		width: 107%;
		transform: rotate(-3.8deg);
		transform-origin: 0 50%;
		will-change: transform;
		background: $yellow;
		transition: all 0.3s ease 1.2s;
		z-index: 1;
	}
}

/* 17) Visibility==================================================*/

.visible {
	visibility: visible !important;
}

.invisible {
	visibility: hidden !important;
}

/* 18) Section ==================================================*/

.section-xs {
	padding-top: 40px;
	padding-bottom: 40px;
}

.section-sm {
	padding: 30px 0;

	&.section-first {
		padding-top: 60px;
	}
	&.section-last {
		padding-bottom: 60px;
	}
}

.section-60,
.section-md,
.section-lg,
.section-xl {
	padding: 60px 0;
}

// Section with bottom zero padding
html [class*='section-'].section-bottom-0 {
	padding-bottom: 0;
}

// Section with top zero padding
html [class*='section-'].section-top-0 {
	padding-top: 0;
}

// Section zero padding
html [class*='section-'] {
	// Large ≥992px
	@include media-breakpoint-up(lg) {
		&.section-lg-0 {
			padding: 0;
		}
	}
}

@include media-breakpoint-up(md) {
	.section-sm {
		padding: 40px 0;

		&.section-first {
			padding-top: 80px;
		}
		&.section-last {
			padding-bottom: 80px;
		}
	}

	.section-md {
		padding: 70px 0;
	}

	.section-lg {
		padding: 80px 0;
	}

	.section-xl {
		padding: 90px 0;
	}
}

@include media-breakpoint-up(lg) {
	.section-sm {
		padding: 50px 0;

		&.section-first {
			padding-top: 100px;
		}
		&.section-last {
			padding-bottom: 100px;
		}
	}

	.section-md {
		padding: 80px 0;
	}

	.section-lg {
		padding: 90px 0;
	}

	.section-inset-custom-6,
	.section-xl {
		padding: 100px 0;
	}

	.desktop {
		.section-top-1 {
			padding-top: 0;
		}
	}
}

//
// Custom sections
//

// Section single
.section-single {
	position: relative;
	overflow: hidden;
	display: flex;
	text-align: center;

	p {
		margin-left: auto;
		margin-right: auto;
	}

	.rights {
		letter-spacing: 0;
		font-weight: 400;

		a {
			position: relative;
			text-decoration: underline;
		}
	}

	.rd-mailform-wrap {
		max-width: 670px;
		margin-left: auto;
		margin-right: auto;
		text-align: center;
	}

	* + p {
		margin-top: 6px;
	}
	p + p {
		margin-top: 0;
	}
	.DateCountdown + p {
		margin-top: 60px;
	}

	.countdown-wrap + * {
		margin-top: 35px;
	}

	@include media-breakpoint-up(lg) {
		* + .button {
			margin-top: 60px;
		}
		* + .rights {
			margin-top: 60px;
		}
		.countdown-wrap + * {
			margin-top: 35px;
		}
	}
}

.section-404 {
	// Extra large ≥1200px
	@include media-breakpoint-up(xl) {
		* + .button {
			margin-top: 90px;
		}
	}
}

/* 19) Shadow ==================================================*/

.shadow-sm {
	box-shadow: $box-shadow-sm !important;
}
.shadow {
	box-shadow: $box-shadow !important;
}
.shadow-lg {
	box-shadow: $box-shadow-lg !important;
}
.shadow-none {
	box-shadow: none !important;
}

/* 20) grid==================================================*/

@if $enable-grid-classes {
	// Single container class with breakpoint max-widths
	.container {
		@include make-container();
		@include make-container-max-widths();
	}

	// 100% wide container at all breakpoints
	.container-fluid {
		@include make-container();
	}

	// Responsive containers that are 100% wide until a breakpoint
	@each $breakpoint, $container-max-width in $container-max-widths {
		.container-#{$breakpoint} {
			@extend .container-fluid;
		}

		@include media-breakpoint-up($breakpoint, $grid-breakpoints) {
			%responsive-container-#{$breakpoint} {
				max-width: $container-max-width;
			}

			// Extend each breakpoint which is smaller or equal to the current breakpoint
			$extend-breakpoint: true;

			@each $name, $width in $grid-breakpoints {
				@if ($extend-breakpoint) {
					.container#{breakpoint-infix($name, $grid-breakpoints)} {
						@extend %responsive-container-#{$breakpoint};
					}

					// Once the current breakpoint is reached, stop extending
					@if ($breakpoint == $name) {
						$extend-breakpoint: false;
					}
				}
			}
		}
	}
}

// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
	.row {
		@include make-row();
	}

	// Remove the negative margin from default .row, then the horizontal padding
	// from all immediate children columns (to prevent runaway style inheritance).
	.no-gutters {
		margin-right: 0;
		margin-left: 0;

		> .col,
		> [class*='col-'] {
			padding-right: 0;
			padding-left: 0;
		}
	}
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
	@include make-grid-columns();
}

/*  21) visually-hidden ==================================================*/

.visually-hidden,
caption > * {
	position: absolute;
	overflow: hidden;
	visibility: hidden;
	width: 0;
	height: 0;
	margin: 0;
	padding: 0;
	font-size: 0;
	line-height: 0;
	background: none;
}

/*  22) curser ==================================================*/
.curser-poiner {
	cursor: pointer;

	&:hover {
		text-decoration: underline !important;
	}
}

/*  23) ellipsis ==================================================*/

.ellipsis {
	@include ellipsis;
	//font-family: 'sans-serif';
	> * {
		font-family: Dotum;
	}
}

.ellipsis-2 {
	@include ellipsis(40, 2);
	//font-family: 'sans-serif';
	> * {
		font-family: Dotum;
	}
}
